# -*- coding: utf-8 -*-
"""RLT_Filter_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CUI9-CvuFygZ25P_DIEgTtI5h7C0b6Ca
"""

import os
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from dateutil.relativedelta import relativedelta


class FilterAndRating():

	def __init__(self, expertise, debt, staff):
		self.expertise = expertise
		self.debt = debt
		self.staff =  staff

	def make(self):
		datapath = os.path.abspath(r'C:\virtualenvs\Site\main\data\hack_2023_04_200k')

		suppliers = pd.read_csv(os.path.join(datapath, "good_suppliers_inn.csv"))
		#suppliers.drop(0, axis=0, inplace=True)
		suppliers['supplier_inn'] = suppliers['supplier_inn'].astype('int64')

		suppliers.shape

		cols = ['inn', 'kpp', 'registration_date', 'termination_date']
		egrul_info = pd.read_csv(os.path.join(datapath, "egrul_info.csv"),
										   encoding='utf-8',
										   sep=';',
											usecols=cols)

		cols = ['inn', 'registration_date', 'termination_date']
		egrip_info = pd.read_csv(os.path.join(datapath, "egrip_info.csv"),
										   encoding='utf-8',
										   sep=';',
											usecols=cols
								 )

		# мержим через left тк в suppliers могут быть ИП, в ЕГРЮЛ дублей по ИНН нет
		m_supp_egrul = suppliers.merge(egrul_info, how='left', left_on='supplier_inn', right_on='inn')

		# мержим через left, в ЕГРИП дублей по ИНН нет
		m_supp_egrul_egrip = m_supp_egrul.merge(egrip_info, how='left', left_on='supplier_inn', right_on='inn')

		# удаляем ненужные колонки
		m_supp_egrul_egrip.drop(['inn_x','kpp','inn_y'], axis=1, inplace=True)

		# корректно переименовываем
		cols = {'registration_date_x':'registration_date_egrul',
				'termination_date_x':'termination_date_egrul',
				'registration_date_y':'registration_date_egrip',
				'termination_date_y':'termination_date_egrip',
				}
		m_supp_egrul_egrip.rename(columns=cols, inplace=True)

		cols = ['debtor_inn', 'enforcement_proceeding_date']
		fssp = pd.read_csv(os.path.join(datapath, "fssp_enforcement_proceedings.csv"),
						   encoding='utf-8',
						   sep=';',
						   usecols=cols)

		# через left, чтоб не оказался пустой ДФ если долгов нет
		main = m_supp_egrul_egrip.merge(fssp, how='left', left_on='supplier_inn', right_on='debtor_inn')
		main.drop(['debtor_inn'], axis=1, inplace=True)

		# среднегодовое число спецов
		avg_staff_qty = pd.read_csv(os.path.join(datapath, "avg_staff_qty.csv"),
						   encoding='utf-8',
						   sep=';')

		main = main.merge(avg_staff_qty, how='left', left_on='supplier_inn', right_on='inn')

		main.drop(['inn'], axis=1, inplace=True)

		######## данные сверху для customer classifier ##########

		cols = ['participant_inn','procedure_qty','win_qty']
		participation_statistic = pd.read_csv(os.path.join(datapath, "participation_statistic.csv"),
										   encoding='utf-8',
										   sep=';',
										   usecols=cols
										   )

		# есть дубли по ИНН поэтому сначал суммируем столбцы
		gr_participation_statistic = participation_statistic.groupby(['participant_inn'], as_index=False).sum()

		gr_participation_statistic['win_percent'] = round(gr_participation_statistic['win_qty'] / gr_participation_statistic['procedure_qty'], 2)

		gr_participation_statistic.drop(['win_qty'], axis=1, inplace=True)

		main = main.merge(gr_participation_statistic, how='left', left_on='supplier_inn', right_on='participant_inn')
		main.drop(['participant_inn'], axis=1, inplace=True)

		# РНП

		cols = ['inn','include_date']
		rnp = pd.read_csv(os.path.join(datapath, "rnp.csv"),
						   encoding='utf-8',
						   sep=';',
						  usecols=cols)

		rnp = rnp.groupby(['inn'], as_index=False).count()

		main = main.merge(rnp, how='left', left_on='supplier_inn', right_on='inn')
		main.drop(['inn'], axis=1, inplace=True)

		# подгружаем контракты поставщиков для дальнейшей связки с жалобами и расторжениями
		suppliers_inn_contract = pd.read_csv(os.path.join(datapath, "suppliers_inn_contract.csv"))
		suppliers_inn_contract.drop(['Unnamed: 0'], axis=1, inplace=True)

		#main = main.merge(suppliers_inn_contract, how='left', left_on='supplier_inn', right_on='supplier_inn')

		# жалобы
		cols = ['id_contract','e_doc_execution_date']
		contract_improper_execution = pd.read_csv(os.path.join(datapath, "contract_improper_execution.csv"),
										   encoding='utf-8',
										   sep=';',
										   usecols=cols)

		improper_cnt = contract_improper_execution.groupby(['id_contract'], as_index=False)['e_doc_execution_date'].count()

		# мержим ДФ конрактов по ИНН с контрактами с ненадлежащим исполнением
		contracts = suppliers_inn_contract.merge(improper_cnt, how='left', left_on='id_contract', right_on='id_contract')



		# колонка с расширенной инфой не исользуется тк не содержит подробной инфы по нужным категориям
		cols = ['id_contract','t_reason_name']
		contract_termination = pd.read_csv(os.path.join(datapath, "contract_termination.csv"),
										   encoding='utf-8',
										   sep=';',
										   usecols=cols)

		# оставить только интересующие причины расторжения
		contract_termination = contract_termination[(contract_termination['t_reason_name'] == 'Судебный акт') \
							 | (contract_termination['t_reason_name'] == 'Односторонний отказ поставщика (подрядчика, исполнителя) от исполнения контракта в соответствии с гражданским законодательством')]

		# посчитать кол-во расторжений по контрактам
		gr_contract_termination = contract_termination.groupby(['id_contract'], as_index=False).count()

		# добавить к контрактам расторжения, удалить столбец с контрактом и просуммировать по ИНН
		contracts = contracts.merge(gr_contract_termination, how='left', left_on='id_contract', right_on='id_contract')
		contracts.drop(['id_contract'], axis=1, inplace=True)
		contracts = contracts.groupby(['supplier_inn'], as_index=False).sum()





		# Финальный ДФ, теперь нужно его привести к норм виду и заскорить
		main_ = main.merge(contracts, how='left', left_on='supplier_inn', right_on='supplier_inn')

		# сначала переводим даты в нужный формат
		main_['registration_date_egrul'] = pd.to_datetime(main_['registration_date_egrul'], 
														   infer_datetime_format=True, 
														   errors = 'coerce')
		main_['termination_date_egrul'] = pd.to_datetime(main_['termination_date_egrul'], 
														   infer_datetime_format=True, 
														   errors = 'coerce')
		main_['registration_date_egrip'] = pd.to_datetime(main_['registration_date_egrip'], 
														   infer_datetime_format=True, 
														   errors = 'coerce')
		main_['termination_date_egrip'] = pd.to_datetime(main_['termination_date_egrip'], 
														   infer_datetime_format=True, 
														   errors = 'coerce')
		main_['enforcement_proceeding_date'] = pd.to_datetime(main_['enforcement_proceeding_date'], 
														   infer_datetime_format=True, 
														   errors = 'coerce')

		# потом переименовываемся и убираем НаНы и НаТы
		cols_to_rename = {
			'include_date': 'RNP_count',
			'e_doc_execution_date': 'improper_execution_count',
			't_reason_name': 'contract_termination_count',
		}
		main_.rename(columns=cols_to_rename, inplace=True)

		main_ = main_.fillna(0)



		staff = self.staff
		expertise = self.expertise
		debt_date = self.debt

		customer_weight = 0.22
		model_weight = 0.2



		# пользовательская метрика, количество указанного стаффа
		main_.loc[(main_['avg_staff_qty'] < staff), 'avg_staff_qty'] = customer_weight * 0
		main_.loc[(main_['avg_staff_qty'] >= staff), 'avg_staff_qty'] = customer_weight

		# пользовательская метрика, требуемый опыт
		# взять относительное время в годах для расчетов, и потом совместить в одну колонку, тк они взаимоисключающие
		main_['registration_date_egrul_passed'] = main_['registration_date_egrul'].apply(lambda x: relativedelta(datetime.today(), x).years)
		main_['registration_date_egrip_passed'] = main_['registration_date_egrip'].apply(lambda x: relativedelta(datetime.today(), x).years)
		main_['registration_date_passed'] = main_['registration_date_egrul_passed'] + main_['registration_date_egrip_passed']
		main_.loc[(main_['registration_date_passed'] < expertise), 'registration_date_passed'] = customer_weight * 0
		main_.loc[(main_['registration_date_passed'] >= expertise), 'registration_date_passed'] = customer_weight

		# пользовательская метрика, прошло ли время штрафа
		main_['enforcement_proceeding_date_passed'] = main_['enforcement_proceeding_date'].apply(lambda x: relativedelta(datetime.today(), x).years)
		main_.loc[(main_['enforcement_proceeding_date_passed'] < debt_date), 'enforcement_proceeding_date_passed'] = customer_weight * 0
		main_.loc[(main_['enforcement_proceeding_date_passed'] >= debt_date), 'enforcement_proceeding_date_passed'] = customer_weight

		# модельная метрика, распалась ли организация. если да то ставится -1 для исключения из рейтинга
		main_.loc[(main_['termination_date_egrul'] != 0), 'termination_date_egrul'] = 1
		main_.loc[(main_['termination_date_egrip'] != 0), 'termination_date_egrip'] = 1
		main_['is_supplier_terminated'] = (main_['termination_date_egrul'] + main_['termination_date_egrip']) * -100

		# модельная метрика, частота участия в закупках, чем выше тем лучше
		main_.loc[(main_['procedure_qty'] != 0), 'procedure_qty'] =  (main_['procedure_qty'] / main_['procedure_qty'].sum()) * model_weight

		# модельная метрика, количество расторжений контракта, чем выше тем хуже
		main_.loc[(main_['contract_termination_count'] != 0), 'contract_termination_count'] =  ((main_['contract_termination_count'].sum() - \
																								main_['contract_termination_count']) / \
																								main_['contract_termination_count'].sum()) * model_weight

		# # модельная метрика, нахождение или попадание в РНП. если попал - вылет из рейтинга
		main_.loc[(main_['RNP_count'] != 0), 'RNP_count'] =  -100

		# модельная метрика, ненадлежащее исполнение контракта, чем выше тем хуже
		main_.loc[(main_['improper_execution_count'] != 0), 'improper_execution_count'] =  ((main_['improper_execution_count'].sum() - \
																							main_['improper_execution_count']) / \
																							main_['improper_execution_count'].sum()) * model_weight

		# дропнуть, теперь не нужны
		main_.drop(['registration_date_egrul','registration_date_egrip', 'registration_date_egrul_passed', 'registration_date_egrip_passed',
					'enforcement_proceeding_date', 'termination_date_egrip', 'termination_date_egrul'], axis=1, inplace=True)

		main_['Rating'] = main_[main_.columns[1:]].sum(axis=1)
		#main_['Rating'] = round(main_['Rating'], 3)
		
		filter1_result = pd.read_csv(os.path.join(datapath, "prepared_res.csv"))
		rating_union = main_.merge(filter1_result, how='left', left_on='supplier_inn', right_on='supplier_inn')
		rating_union.drop(['avg_staff_qty','procedure_qty',
                   'win_percent','RNP_count','improper_execution_count',
                   'contract_termination_count','registration_date_passed',
                   'enforcement_proceeding_date_passed','is_supplier_terminated'], axis=1, inplace=True)
				   
		rating_union['Планируемое время исполнения, дней'] = rating_union['Планируемое время исполнения, дней'].astype('int')
		rating_union['Подходит по цене'] = rating_union['Подходит по цене'].astype('int')
		rating_union['Подходит по сроку'] = rating_union['Подходит по сроку'].astype('int')	
		#rating_union['supplier_inn'] = rating_union['supplier_inn'].astype('int')	
		rating_union = rating_union.sort_values(by=['Rating'], ascending=False)	
		
		#to_show = main_[['supplier_inn','Rating']].sort_values(by=['Rating'], ascending=False)
		rating_union.to_csv(os.path.join(datapath, "_rating_union.csv"), index=False)
		
		return rating_union